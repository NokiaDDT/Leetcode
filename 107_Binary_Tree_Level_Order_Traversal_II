Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
# ==== from Submission, same idea but use queue, Runtime: 40 ms
        if not root: return []
        visited = []
        queue = [root]
        
        while queue:
            visited_tmp = []
            queue_len = len(queue)
            for i in range(queue_len):
                node = queue.pop(0)
                visited_tmp.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            visited.insert(0, visited_tmp)
            
        return visited

# ==== My solution, Runtime: 52 ms
        if not root: return []
        result = []
        nodes = [root]
        
        while nodes:
            level_result = []
            next_nodes = []
            for i in nodes:
                level_result.append(i.val)
                if i.left:
                    next_nodes.append(i.left)
                if i.right:
                    next_nodes.append(i.right)
            result.insert(0, level_result)
            nodes = next_nodes
        
        return result
                
