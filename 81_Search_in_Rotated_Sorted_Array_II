Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

Follow up:
    This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
    Would this affect the run-time complexity? How and why?

class Solution:
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """

# ==== from Discussion, Runtime: 40 ms
        if not nums:
            return False
        
        leftIndex = 0
        rightIndex = len(nums) - 1
        
        while leftIndex < rightIndex:
            middle = (rightIndex + leftIndex + 1) // 2
            
            if nums[middle] == target:
                return True
            
            if nums[middle] < nums[rightIndex]:
                if nums[middle] < target <= nums[rightIndex]:
                    leftIndex = middle + 1
                else:
                    rightIndex = middle - 1
            elif nums[middle] > nums[rightIndex]:
                if nums[leftIndex] <= target < nums[middle]:
                    rightIndex = middle - 1
                else:
                    leftIndex = middle + 1
            else:
                rightIndex -= 1
                
        return nums[leftIndex] == target
