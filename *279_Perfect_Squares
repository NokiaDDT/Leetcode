Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

Example 1:
Input: n = 12
Output: 3 
Explanation: 12 = 4 + 4 + 4.

Example 2:
Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.

class Solution:
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        
# ==== from Discussion, Runtime: 184 ms
        if n < 2:
            return n
        lst = []
        i = 1
        while i * i <= n:
            lst.append( i * i )
            i += 1
        cnt = 0
        toCheck = {n}
        while toCheck:
            cnt += 1
            temp = set()
            for x in toCheck:
                for y in lst:
                    if x == y:
                        return cnt
                    if x < y:
                        break
                    temp.add(x-y)
            toCheck = temp

        return cnt

# ==== My solution, use a list [i ** 2] and i == num to calculate, Runtime: 352 ms
        result = n
        squares = [(n, 1)]
        done = set()
        
        # generate perfect square list
        i = 1
        perfectSquares = []
        while i * i <= n:
            perfectSquares.append(i * i)
            i += 1
        
        while squares:
            num, level = squares.pop(0)
            squareRoot = int (num ** 0.5)
            # print(num, level, done, result)
            
            for i in perfectSquares:
                if i > num:
                    break
                if i == num:
                    return level
                else:
                    newN = num - i
                    if newN not in done:
                        squares.append((newN, level + 1))
                        done.add(newN)
                        # print('append', newN, level + 1)
                        
        return result
# ==== My solution, use a list [i ** 2] to calculate, Time Limit Exceeded, 528 / 588 test cases passed.
        result = n
        squares = [(n, 1)]
        done = set()
        
        # generate perfect square list
        i = 1
        perfectSquares = []
        while i * i <= n:
            perfectSquares.append(i * i)
            i += 1
        
        while squares:
            num, level = squares.pop(0)
            squareRoot = int (num ** 0.5)
            # print(num, level, done, result)
            
            for i in perfectSquares:
                if i > num:
                    break
                if num % i == 0:
                    tmpOutput = level + num // i
                    result = min(result, tmpOutput)
                    # print('find it', num, i ** 2)
                    done.add(num)
                else:
                    newN = num - i
                    if newN not in done:
                        squares.append((newN, level + 1))
                        done.add(newN)
                        # print('append', newN, level + 1)
                        
        return result
    
# ==== My solution, Time Limit Exceeded, 506 / 588 test cases passed.
        result = n
        squares = [(n, 0)]
        done = set()
        
        while squares:
            num, level = squares.pop(0)
            squareRoot = int (num ** 0.5)
            # print(num, level, done, result)
            
            for i in range(squareRoot, 0, -1):
                if num % (i ** 2) == 0:
                    tmpOutput = level + num // (i ** 2)
                    result = min(result, tmpOutput)
                    # print('find it', num, i ** 2)
                    done.add(num)
                else:
                    newN = num - i ** 2
                    if newN not in done:
                        squares.append((newN, level + 1))
                        done.add(newN)
                        # print('append', newN, level + 1)
                        
        return result
