You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:
Input: coins = [1, 2, 5], amount = 11
Output: 3 
Explanation: 11 = 5 + 5 + 1

Example 2:
Input: coins = [2], amount = 3
Output: -1

Note:
You may assume that you have an infinite number of each kind of coin.

class Solution:
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """

# ==== My solution by BFS, Runtime: 960 ms by using list and list.pop(0), Runtime: 632 ms by using deque and deque.popleft()
        if amount == 0:
            return 0
        
        coins.sort()
        
        nodes = collections.deque()
        nodes.append((amount, 1))
        # Use list and list.pop(0) is slower
        # nodes = [(amount, 1)]
        
        done = set()
        
        while nodes:
            node, level = nodes.popleft()
            # Use list and list.pop(0) is slower
            # node, level = nodes.pop(0)
            for i in coins:
                if node == i:
                    # print('equal', node, i, level)
                    return level
                elif node < i:
                    # print('break', node, i, level)
                    break
                else:
                    # print('append', node, i, level)
                    if node-i not in done:
                        nodes.append((node - i, level + 1))
                        done.add(node - i)
        return -1
                    
            
