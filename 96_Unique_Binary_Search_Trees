Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:
Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

class Solution:
    def numTrees(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        if n == 0 or n == 1:
            return 1
        
        dp = [0] * (n + 1)
        dp[0] = dp[1] = 1
        
        # E G(i - 1) * G(n - i)
        for i in range(2, n + 1):
            for j in range(1, i + 1):
                dp[i] += dp[j - 1] * dp[i - j]
                # print(i, j, i - j + 1, dp[i], dp[j], dp[i - j - 1])
            
        return dp[n]
