Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:
    Only one letter can be changed at a time
    Each transformed word must exist in the word list. Note that beginWord is not a transformed word.

Note:
    Return an empty list if there is no such transformation sequence.
    All words have the same length.
    All words contain only lowercase alphabetic characters.
    You may assume no duplicates in the word list.
    You may assume beginWord and endWord are non-empty and are not the same.

Example 1:
Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]
Output:
[
  ["hit","hot","dot","dog","cog"],
  ["hit","hot","lot","log","cog"]
]

Example 2:
Input:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
Output: []
Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.

class Solution:
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
# ==== from Discussion, Runtime: 520 ms
        wordList = set(wordList)
        res = []
        layer = {}
        layer[beginWord] = [[beginWord]]

        while layer:
            newlayer = collections.defaultdict(list)
            for w in layer:
                if w == endWord: 
                    res.extend(k for k in layer[w])
                else:
                    for i in range(len(w)):
                        for c in string.ascii_lowercase:
                            neww = w[:i] + c + w[i+1:]
                            if neww in wordList:
                                newlayer[neww] += [j + [neww] for j in layer[w]]

            wordList -= set(newlayer.keys())
            layer = newlayer

        return res

# ==== My solution, Time Limit Exceeded, 3 / 39 test cases passed.
        # early stop, if 1 char. e.g. "a", "c", ["a","b","c"]
        if len(beginWord) == 1:
            return [[beginWord, endWord]]

        # arrange graph
        paths = collections.defaultdict(list)
        
        if beginWord not in wordList:
            wordList.insert(0, beginWord)
        
        for word in wordList:
            for j in range(len(word)):
                for char in string.ascii_lowercase:
                    word_c = word[:j] + char + word[j+1:]
                    if word_c in wordList:
                        paths[word].append(word_c)
        
        if not paths[beginWord] or not paths[endWord]:
            return []
                            
        # print(paths)
        
        # maintain a queue of paths
        queue = []
        # push the first path into the queue
        queue.append([beginWord])
        finalResult = []
        minSteps = -1
        while queue:
            # get the first path from the queue
            path = queue.pop(0)
            # get the last node from the path
            node = path[-1]
            # path found
            if node == endWord:
                if not finalResult:
                    finalResult.append(path)
                    minSteps = len(path)
                elif minSteps == len(path):
                    finalResult.append(path)
                else:
                    break
                
            # enumerate all adjacent nodes, construct a new path and push it into the queue
            for adjacent in paths.get(node, []):
                new_path = list(path)
                new_path.append(adjacent)
                queue.append(new_path)
        
        return finalResult
