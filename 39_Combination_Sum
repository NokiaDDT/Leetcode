Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.
The same repeated number may be chosen from candidates unlimited number of times.

Note:
    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]

Example 2:
Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

class Solution:
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """

# from Submission, Runtime: 60 ms
        candidates = sorted(candidates)
        ret = []
        def helper(idx, target, comb):
            # print(target, idx, comb)
            if target == 0:
                ret.append(copy.copy(comb))
            elif target > 0:
                for i, c in enumerate(candidates[idx:]):
                    if c > target:
                        break
                    comb.append(c)
                    helper(idx + i, target - c, comb)
                    comb.pop()
        helper(0, target, [])
        return ret
    
# ==== My solution, Runtime: 168 ms
        candidates.sort()
        
        nodes = [(target, [])]
        result = set()
        
        while nodes:
            n, paths = nodes.pop()
            
            for i in candidates:
                if i > n:
                    break
                
                newPaths = paths + [i]
                newPaths.sort()
                
                if i == n and tuple(newPaths) not in result:
                    result.add(tuple(newPaths))
                elif i < n:
                    nodes.append((n - i, newPaths))
                    
        return list(result)
