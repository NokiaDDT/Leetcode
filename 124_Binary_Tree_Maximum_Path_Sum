Given a non-empty binary tree, find the maximum path sum.
For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:
Input: [1,2,3]
       1
      / \
     2   3
Output: 6

Example 2:
Input: [-10,9,20,null,null,15,7]
   -10
   / \
  9  20
    /  \
   15   7
Output: 42

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxPathSum(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        self.minInt = sys.maxsize * -1 - 1
        self.max = self.minInt
        
        self.getSubSum(root)
        return self.max
        
    def getSubSum(self, root):
        if not root:
            return 0
        
        left = max(0, self.getSubSum(root.left))
        right = max(0, self.getSubSum(root.right))
        
        self.max = max(self.max, root.val + left + right)
        # Only one side will be add, not whole tree
        return max(left, right) + root.val
