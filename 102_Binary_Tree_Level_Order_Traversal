Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

from collections import deque

class Solution:
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
# ==== Another solution is to put all same level nodes together and print it all and handle their children and so on.
        
# ==== Use dequq to store nodes, Runtime: 56 ms        
        nodes = deque()
        nodes.append((root, 0))
        result = []
        
        while nodes:
            node, depth = nodes.popleft()
            
            # constructure current node
            if len(result) <= depth:
                if node:
                    result.append([node.val])
                else:
                    continue
            else:
                if node:
                    result[depth].append(node.val)
                else:
                    continue
                    
            # constructure subtree
            if node.left:
                nodes.append((node.left, depth + 1))
            if node.right:
                nodes.append((node.right, depth + 1))
                
        return result
