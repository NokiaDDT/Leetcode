Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:
Given this linked list: 1->2->3->4->5
For k = 2, you should return: 2->1->4->3->5
For k = 3, you should return: 3->2->1->4->5

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """

# ==== My solution, Runtime: 64 ms
        if k == 1 or not head:
            return head
        
        result = ListNode(None)
        tmp = result
        node = head
        reverse_list = [None] * k
        reverse_list_index = 0
        while node:
            # print('reverse_list_index', reverse_list_index, 'node.val', node.val)
            reverse_list[reverse_list_index] = node.val
            node = node.next
            reverse_list_index = (reverse_list_index + 1) % k
                
            if reverse_list_index != 0:
                continue
                
            for value in reversed(reverse_list):
                tmp.next = ListNode(value)
                tmp = tmp.next
                
        # print('reverse_list_index', reverse_list_index)
        for i in range(reverse_list_index):
            tmp.next = ListNode(reverse_list[i])
            tmp = tmp.next
            
        return result.next
