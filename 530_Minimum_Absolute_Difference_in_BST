Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.

Example:
Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).

Note: There are at least two nodes in this BST.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    def getMinimumDifference(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.mylist = []
        
        self.getData(root)
        
        self.mylist.sort()
        
        min = sys.maxsize
        for i in range(len(self.mylist) - 1):
            diff = int(math.fabs(self.mylist[i] - self.mylist[i + 1]))
            if diff == 1:
                return 1
            elif diff < min:
                min = diff
        return min
        
    def getData(self, root):
        self.mylist.append(root.val)
        
        if root.right is not None:
            self.getData(root.right)
        if root.left is not None:
            self.getData(root.left)
