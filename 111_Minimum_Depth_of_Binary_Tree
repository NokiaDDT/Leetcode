Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
# ==== from Solution, use DFS, Runtime: 56 ms
        if not root:
            return 0
        else:
            stack, min_depth = [(1, root),], float('inf')
        
        while stack:
            depth, root = stack.pop()
            children = [root.left, root.right]
            if not any(children):
                min_depth = min(depth, min_depth)
            for c in children:
                if c:
                    stack.append((depth + 1, c))
        
        return min_depth 
        
        
# ==== My solution, check leaf node first to get better performance, Runtime: 48 ms
        if not root:
            return 0
        
        nodes = [root]
        depth = 1
        while nodes:
            nodes_len = len(nodes)
            for i in range(nodes_len):
                node = nodes.pop(0)
                if not node.left and not node.right:
                    return depth
                if node.left:
                    nodes.append(node.left)
                if node.right:
                    nodes.append(node.right)
                
            depth += 1
        return depth
                
