 A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
Return a deep copy of the list. 

# Definition for singly-linked list with a random pointer.
# class RandomListNode(object):
#     def __init__(self, x):
#         self.label = x
#         self.next = None
#         self.random = None

class Solution(object):
    def __init__(self):
        self.paths = {}
    def copyRandomList(self, head):
        """
        :type head: RandomListNode
        :rtype: RandomListNode
        """
        if not head:
            return head
        
        if head in self.paths:
            return self.paths[head]
        
        node = RandomListNode(head.label)
        self.paths[head] = node
        
        node.next = self.copyRandomList(head.next)
        node.random = self.copyRandomList(head.random)
        
        return node
