Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """

# ==== My solution, use list(reversed(Array)) to zigzap! Runtime: 48 ms
# ==== My solution, use list[::-1] to zigzap! Runtime: 36 ms
        if root is None:
            return []
        
        result = []
        nodes = [root]
        zigzag = 1
        
        while nodes:
            nodes_result = []
            for i in nodes:
                if i is not None:
                    nodes_result.append(i.val)
            result.append(nodes_result[::zigzag])
            zigzag *= -1
            
            tmp_nodes = []
            for i in nodes:
                if i is not None:
                    if i.left is not None:
                        tmp_nodes.append(i.left)
                    if i.right is not None:
                        tmp_nodes.append(i.right)
            nodes = tmp_nodes
            
        return result
