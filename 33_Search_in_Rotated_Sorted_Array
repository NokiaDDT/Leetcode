Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

class Solution:
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """

# ==== My solution, Runtime: 40 ms
# ==== Use Binary search
        if not nums:
            return -1
        
        base = 0
        middle = len(nums) // 2
        
        print(nums, base, middle)
        
        while middle > 1:
            if nums[0] < nums[middle - 1]:
                if target >= nums[0] and target <= nums[middle - 1]:
                    nums = nums[:middle]
                    # base += 0
                    middle = len(nums) // 2
                    print("1st", nums, middle, base)
                    continue
            elif target == nums[0]:
                return base
            elif target == nums[middle - 1]:
                return base + middle - 1
            elif target >= nums[0] or target <= nums[middle -1]:
                nums = nums[:middle]
                # base += 0
                middle = len(nums) // 2
                print("2nd", nums, middle, base)
                continue
                
            if nums[middle] < nums[-1]:
                if target >= nums[middle] and target <= nums[-1]:
                    nums = nums[middle:]
                    base += middle
                    middle = len(nums) // 2
                    print("3rd", nums, middle, base)
                    continue
            elif target == nums[middle]:
                return base + middle
            elif target == nums[-1]:
                return base + len(nums) - 1
            elif target >= nums[middle] or target <= nums[-1]:
                nums = nums[middle:]
                base += middle
                middle = len(nums) // 2
                print("4th", nums, middle, base)
                continue
            break
                
        for i in range(len(nums)):
            if nums[i] == target:
                return base + i
        else:
            return -1
