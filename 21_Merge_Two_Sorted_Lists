Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:
Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
# ==== from discussion, same idea but more shortly, Runtime: 44 ms
        # The node is useless, return result.next instead.
        result = tmp = ListNode(0)
        
        while l1 and l2:
            tmp.next = l1 if l1.val < l2.val else l2
            tmp = tmp.next
            if l1.val < l2.val:
                l1 = l1.next
            else:
                l2 = l2.next
        tmp.next = l1 or l2
        
        return result.next
        
# ==== The node is useless, return result.next instead, Runtime: 60 ms
        result = tmp = ListNode(0)
        
        while l1 or l2:
            if l1 and l2:
                tmp.next = ListNode(l1.val) if l1.val < l2.val else ListNode(l2.val)
                tmp = tmp.next
                if l1.val < l2.val:
                    l1 = l1.next
                else:
                    l2 = l2.next
            elif l1:
                tmp.next = ListNode(l1.val)
                tmp = tmp.next
                l1 = l1.next
            elif l2:
                tmp.next = ListNode(l2.val)
                tmp = tmp.next
                l2 = l2.next
        return result.next
