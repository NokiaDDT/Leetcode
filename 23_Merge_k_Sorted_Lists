Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:
Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
# ==== Solution from Submission detail, fastest!, Runtime: 64 ms
        cache = []
        result = ListNode(None)
        tmp = result
        for l in lists:
            while l:
                cache.append(l)
                l = l.next
        for l in sorted(cache, key=lambda node: node.val):
            tmp.next = l
            tmp = tmp.next
        return result.next
        
        
# ==== Same algrithm from Solution but use heapq, Runtime: 100 ms
        q = []
        for index, l in enumerate(lists):
            if l:
                q.append((l.val, index))
        heapq.heapify(q)
        
        result = tmp = ListNode(None)
        while q:
            _, index = heapq.heappop(q)
            tmp.next = lists[index]
            tmp = tmp.next
            next_node = lists[index].next
            if next_node:
                heapq.heappush(q, (next_node.val, index))
                lists[index] = next_node
                
        return result.next

# ==== My solution, time out
        check_table = [sys.maxsize] * len(lists)
        result = tmp = ListNode(None)
        lists = [x for x in lists if x]
        while len(lists) > 1:
            for i in range(len(lists)):
                if lists[i]:
                    check_table[i] = lists[i].val
            min_index = check_table.index(min(check_table))
            
            tmp.next = lists[min_index]
            tmp = tmp.next
            lists[min_index] = lists[min_index].next
        
            lists = [x for x in lists if x]
            if len(lists) == 1:
                tmp.next = lists[0]
                break
        return result.next
