Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:
Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 

Note:
    There may be more than one LIS combination, it is only necessary for you to return the length.
    Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?

from bisect import bisect_left
class Solution:
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

# ==== from Solution, Approach #4 Dynamic Programming with Binary Search, Runtime: 36 ms
        dp = []
        for n in nums:
            i = bisect_left(dp, n)
            if i >= len(dp):
                dp.append(n)
                # print("append", dp)
            dp[i] = n
            # print("replace", dp)
        return len(dp)
        
        
# ==== from Solution, Approach #3 Dynamic Programming, Runtime: 1072 ms
        if not nums:
            return 0
        
        lenNums = len(nums)
        if lenNums == 1:
            return 1
        
        subset = [0] * lenNums
        subset[0] = 1
        
        for i in range(1, lenNums):
            maxVal = 0
            for j in range(0, i):
                if nums[j] < nums[i]:
                    maxVal = max(maxVal, subset[j])
            subset[i] = maxVal + 1
        # print(subset)
        return max(subset)
                
# ==== My solution, use itertools.combinations(list, m), Memory Limit Exceeded, 22 / 24 test cases passed.
        if not nums:
            return 0
        lenNums = len(nums)
        if lenNums == 1:
            return 1
        # if lenNums == 2:
        #     return 2 if nums[0] < nums[1] else 1
        
        for i in reversed(range(2, lenNums + 1)):
            newCombination = list(itertools.combinations(nums, i))
            for j in newCombination:
                index = 0
                # print(j, start)
                for k in range(1, i):
                    if j[k] > j[index]:
                        index += 1
                        # print('start change to be', start)
                    else:
                        break
                if index == len(j) - 1:
                    return i
        
        return 1
