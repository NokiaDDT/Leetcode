Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:
Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from itertools import permutations
class Solution:
    def generateTrees(self, n):
        """
        :type n: int
        :rtype: List[TreeNode]
        """
           
# ==== From Solution, runtime = 64 ms
        return self.genBst(1, n) if n > 0 else []
    
    def genBst(self, start, end):
        if start > end:
            return [None]
        
        result = []
        for i in range(start, end + 1):
            leftBst = self.genBst(start, i - 1)
            rightBst = self.genBst(i + 1, end)

            for l in leftBst:
                for r in rightBst:
                    bst = TreeNode(i)
                    bst.left = l
                    bst.right = r
                    result.append(bst)
        return result
        
# ==== My original solution, runtime = 1712 ms
#         if n == 0:
#             return []
        
        
#         permutation_of_n = list(permutations(range(1, n+1), n))
#         result = []
#         result_txt = []
        
#         for i in permutation_of_n:
#             # to build BST
#             bst = TreeNode(i[0])
#             for j in range(1, len(i)):
#                 bst = self.addNode(bst, i[j])
            
#             bst_txt = self.printBst(bst)
#             if bst_txt not in result_txt:
#                 result_txt.append(bst_txt)
#                 result.append(bst)
#         return result
    
#     def addNode(self, bst, val):
#         newNode = TreeNode(val)
        
#         if not bst:
#             bst = newNode
#         elif bst.val > val:
#             bst.left = self.addNode(bst.left, val)
#         elif bst.val < val:
#             bst.right = self.addNode(bst.right, val)
        
#         return bst
        
#     def printBst(self, bst):
#         if bst is None:
#             return []
#         elif bst.left is None and bst.right is None:
#             return [bst.val]
        
#         if bst.left is not None:
#             left = self.printBst(bst.left)
#         else:
#             left = [None]
#         if bst.right is not None:
#             right = self.printBst(bst.right)
#         else:
#             right = [None]
#         return [bst.val] + left + right
