You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        # ==== Nice solution ====
        dummy = cur = ListNode(0)
        carry = 0
        while l1 or l2 or carry:
            if l1:
                carry += l1.val
                l1 = l1.next
            if l2:
                carry += l2.val
                l2 = l2.next
            cur.next = ListNode(carry%10)
            cur = cur.next
            carry //= 10
        return dummy.next
        # ==== end of Nice solution ====
        
         self.result = ListNode(0)
         self.go = self.result
         carry = 0
         while l1 is not None or l2 is not None:
             l1val = 0 if l1 is None else l1.val
             l2val = 0 if l2 is None else l2.val
             print(l1val, l2val, carry)
             add = l1val + l2val + carry
             carry = add // 10
             add = add % 10
            
             self.go.next = ListNode(add)
             self.go = self.go.next
            
             if l1 is not None:
                 l1 = l1.next
             if l2 is not None:
                 l2 = l2.next
         if carry == 1:
             self.go.next = ListNode(carry)
         return self.result.next

