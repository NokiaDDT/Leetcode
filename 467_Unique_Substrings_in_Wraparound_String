Consider the string s to be the infinite wraparound string of "abcdefghijklmnopqrstuvwxyz", so s will look like this: "...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....".
Now we have another string p. Your job is to find out how many unique non-empty substrings of p are present in s. In particular, your input is the string p and you need to output the number of different non-empty substrings of p in the string s.
Note: p consists of only lowercase English letters and the size of p might be over 10000.

Example 1:
Input: "a"
Output: 1
Explanation: Only the substring "a" of string "a" is in the string s.

Example 2:
Input: "cac"
Output: 2
Explanation: There are two substrings "a", "c" of string "cac" in the string s.

Example 3:
Input: "zab"
Output: 6
Explanation: There are six substrings "z", "a", "b", "za", "ab", "zab" of string "zab" in the string s.

class Solution:
    def findSubstringInWraproundString(self, p):
        """
        :type p: str
        :rtype: int
        """
        
# ==== from discussion, Python O(n) DP, Runtime: 96 ms
        if len(p) <= 1:
            return len(p)
        
        pDict = collections.defaultdict(int)
        pDict[p[0]] = 1
        maxLength = 1
        
        match = 'zabcdefghijklmnopqrstuvwxyz'
        for i in range(1, len(p)):
            if p[i - 1] + p[i] in match:
                maxLength += 1
            else:
                maxLength = 1
                
            pDict[p[i]] = max(pDict[p[i]], maxLength)
            
        return sum(pDict.values())
    
# ==== from discussion, same algrithm, Runtime: 88 ms
        pDict = {i:1 for i in p}
        maxLength = 1
        match = 'zabcdefghijklmnopqrstuvwxyz'
        
        for a, b in zip(p, p[1:]):
            if a+b in match:
                maxLength += 1
                pDict[b] = max(maxLength, pDict[b])
            else:
                maxLength = 1
        
        return sum(pDict.values())
                
        
# ==== My solution, Time Limit Exceeded, 35 / 81 test cases passed
        if not p:
            return 0
        
        stack = set()
        previous = None
        for i in p:
            if previous and (ord(i) - ord(previous[-1])) % 26 == 1:
                previous += i
                if len(previous) == 26:
                    return len(p) * (len(p) + 1) // 2
            elif previous:
                # if len(previous) >= 2:
                stack.add(previous)
                previous = i
            else:
                previous = i
        # if len(previous) >= 2:
        stack.add(previous)
        print(stack)
        
        result = set()
        for i in stack:
            for j in range(len(i)):
                for k in range(j + 1, len(i) + 1):
                    result.add(i[j:k])
            
        return len(result)
