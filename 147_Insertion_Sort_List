Sort a linked list using insertion sort.
A graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list.
With each iteration one element (red) is removed from the input data and inserted in-place into the sorted list
 

Algorithm of Insertion Sort:
    Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list.
    At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.
    It repeats until no input elements remain.


Example 1:
Input: 4->2->1->3
Output: 1->2->3->4

Example 2:
Input: -1->5->3->4->0
Output: -1->0->3->4->5

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def insertionSortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """

# ==== Use sort(), Runtime: 56 ms
        result = []
        node = head
        while node:
            result.append(node.val)
            node = node.next
        
        result.sort()
        node = head
        for i in result:
            node.val = i
            node = node.next
        
        return head

# ==== My solution, Runtime: 2572 ms
        if not head or not head.next:
            return head
        result = ListNode(None)
        
        while head:
            head_next = head.next
            # find a position to inserted
            insertedNode = result
            while insertedNode.next and insertedNode.next.val <= head.val:
                insertedNode = insertedNode.next
            head.next, insertedNode.next = insertedNode.next, head
            
            head = head_next
        
        return result.next
